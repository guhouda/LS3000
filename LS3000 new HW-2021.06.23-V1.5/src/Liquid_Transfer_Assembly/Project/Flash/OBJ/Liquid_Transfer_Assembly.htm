<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Flash\OBJ\Liquid_Transfer_Assembly.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Flash\OBJ\Liquid_Transfer_Assembly.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060300: Last Updated: Wed Jun 30 18:29:47 2021
<BR><P>
<H3>Maximum Stack Usage =        368 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
backMotor1_task &rArr; backMotorRunFun_mm &rArr; Suction_Sample &rArr; MotorMove_LIQ &rArr; MotorPosReset_TD &rArr; SetMotorRunParam_MD &rArr; SendCmdToReg &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC_IRQHandler</a><BR>
 <LI><a href="#[ef]">TMC5160_MotorPosReset</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b0]">TMC5160_MotorMove</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32f4xx_it.o(i.BusFault_Handler) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[1e]">CAN1_RX0_IRQHandler</a> from bsp_can_drive.o(i.CAN1_RX0_IRQHandler) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[1d]">CAN1_TX_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[4a]">CAN2_RX0_IRQHandler</a> from bsp_can_drive.o(i.CAN2_RX0_IRQHandler) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[4b]">CAN2_RX1_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[4c]">CAN2_SCE_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[49]">CAN2_TX_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[59]">CRYP_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[6e]">Can1CallBack_CP</a> from bsp_can_drive.o(i.Can1CallBack_CP) referenced from bsp_can_drive.o(i.CanQueueParmInit)
 <LI><a href="#[6c]">CanSendMsg_Task</a> from main.o(i.CanSendMsg_Task) referenced from main.o(i.AppTaskCreate)
 <LI><a href="#[6d]">Check_Liquid_State_Task</a> from main.o(i.Check_Liquid_State_Task) referenced from main.o(i.AppTaskCreate)
 <LI><a href="#[58]">DCMI_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[15]">DMA1_Stream0_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[16]">DMA1_Stream1_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[17]">DMA1_Stream2_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[18]">DMA1_Stream3_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[19]">DMA1_Stream4_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream5_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream6_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[39]">DMA1_Stream7_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[64]">DMA2D_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[42]">DMA2_Stream0_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[43]">DMA2_Stream1_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[44]">DMA2_Stream2_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[45]">DMA2_Stream3_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[46]">DMA2_Stream4_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[4e]">DMA2_Stream5_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[4f]">DMA2_Stream6_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[50]">DMA2_Stream7_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32f4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[47]">ETH_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[48]">ETH_WKUP_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[3a]">FMC_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[5b]">FPU_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[5a]">HASH_RNG_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[6f]">HandleTimeoutFun</a> from drivermotortime.o(i.HandleTimeoutFun) referenced from drivermotortime.o(i.MotorTimerInit)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f4xx_it.o(i.HardFault_Handler) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[53]">I2C3_ER_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[52]">I2C3_EV_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[63]">LTDC_ER_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[62]">LTDC_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[6b]">LiquidTest_Task</a> from main.o(i.LiquidTest_Task) referenced from main.o(i.AppTaskCreate)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32f4xx_it.o(i.MemManage_Handler) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[68]">MultiCommRead_Task</a> from main.o(i.MultiCommRead_Task) referenced from main.o(i.AppTaskCreate)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f4xx_it.o(i.NMI_Handler) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[4d]">OTG_FS_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[34]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[55]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[54]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[57]">OTG_HS_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[56]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[d]">RTC_WKUP_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[61]">SAI1_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[3b]">SDIO_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[5e]">SPI4_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[5f]">SPI5_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[60]">SPI6_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from port.o(.emb_text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from port.o(i.SysTick_Handler) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[66]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f429_439xx.o(.text)
 <LI><a href="#[c]">TAMP_STAMP_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[23]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from drivermotortime.o(i.TIM2_IRQHandler) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[40]">TIM6_DAC_IRQHandler</a> from bsp_timer.o(i.TIM6_DAC_IRQHandler) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[41]">TIM7_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[36]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from uartdriver.o(i.UART4_IRQHandler) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from uartdriver.o(i.UART5_IRQHandler) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[5c]">UART7_IRQHandler</a> from uartdriver.o(i.UART7_IRQHandler) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[5d]">UART8_IRQHandler</a> from uartdriver.o(i.UART8_IRQHandler) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from uartdriver.o(i.USART1_IRQHandler) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from uartdriver.o(i.USART2_IRQHandler) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from uartdriver.o(i.USART3_IRQHandler) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[51]">USART6_IRQHandler</a> from uartdriver.o(i.USART6_IRQHandler) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[70]">Uart1CallBack_SC</a> from uartcallback.o(i.Uart1CallBack_SC) referenced from uartdriver.o(i.UartConfig_UD)
 <LI><a href="#[71]">Uart2CallBack_SC</a> from uartcallback.o(i.Uart2CallBack_SC) referenced from uartdriver.o(i.UartConfig_UD)
 <LI><a href="#[72]">Uart3CallBack_SC</a> from uartcallback.o(i.Uart3CallBack_SC) referenced from uartdriver.o(i.UartConfig_UD)
 <LI><a href="#[73]">Uart4CallBack_SC</a> from uartcallback.o(i.Uart4CallBack_SC) referenced from uartdriver.o(i.UartConfig_UD)
 <LI><a href="#[74]">Uart5CallBack_SC</a> from uartcallback.o(i.Uart5CallBack_SC) referenced from uartdriver.o(i.UartConfig_UD)
 <LI><a href="#[75]">Uart6CallBack_SC</a> from uartcallback.o(i.Uart6CallBack_SC) referenced from uartdriver.o(i.UartConfig_UD)
 <LI><a href="#[76]">Uart7CallBack_SC</a> from uartcallback.o(i.Uart7CallBack_SC) referenced from uartdriver.o(i.UartConfig_UD)
 <LI><a href="#[77]">Uart8CallBack_SC</a> from uartcallback.o(i.Uart8CallBack_SC) referenced from uartdriver.o(i.UartConfig_UD)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32f4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[67]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f429_439xx.o(.text)
 <LI><a href="#[69]">backMotor1_task</a> from main.o(i.backMotor1_task) referenced from main.o(i.AppTaskCreate)
 <LI><a href="#[6a]">backMotor2_task</a> from main.o(i.backMotor2_task) referenced from main.o(i.AppTaskCreate)
 <LI><a href="#[78]">fputc</a> from uartdriver.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[65]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[7a]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[79]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[67]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(.text)
</UL>
<P><STRONG><a name="[19e]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[7b]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[90]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[19f]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[1a0]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[1a1]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[1a2]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[1a3]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[197]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[196]"></a>__asm___6_port_c_39a90d8d__prvEnableVFP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[1a4]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text), UNUSED)

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>CRYP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>DMA2D_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>LTDC_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>LTDC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>SPI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[f1]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Motor_Init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandlerComm
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
</UL>

<P><STRONG><a name="[cd]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PushInCanRxMsgQ_BC
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PopOutCanRxMsgQ_BC
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanQueueParmInit
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchAllPeak
</UL>

<P><STRONG><a name="[1a5]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[7f]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAllocateTCBAndStack
</UL>

<P><STRONG><a name="[1a6]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1a7]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[7e]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitQueue_Q
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandlerComm
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorTimerInit
</UL>

<P><STRONG><a name="[e5]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_CV_Measure
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestCV_MD
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCalculateReasult_MD
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadSystemParm
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backMotorRunFun_mm
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Motor_Init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandlerComm
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartConfig_UD
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchAllPeak
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindLineC
</UL>

<P><STRONG><a name="[1a8]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[80]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[121]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Debug
</UL>

<P><STRONG><a name="[81]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMotorMaxSpeed
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMotorAccDec
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>

<P><STRONG><a name="[86]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[87]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[88]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Suction_Sample_Liq
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Suction_Sample
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMotorMaxSpeed
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMotorAccDec
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[89]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Suction_Sample_Liq
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Suction_Sample
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[8a]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Suction_Sample_Liq
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Suction_Sample
</UL>

<P><STRONG><a name="[8b]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMotorMaxSpeed
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMotorAccDec
</UL>

<P><STRONG><a name="[8c]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Suction_Sample_Liq
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Suction_Sample
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMotorMaxSpeed
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMotorAccDec
</UL>

<P><STRONG><a name="[141]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestCV_MD
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCalculateReasult_MD
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backMotorRunFun_mm
</UL>

<P><STRONG><a name="[1a9]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[16e]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[8e]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[82]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[1aa]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[8d]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[1ab]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[83]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1ac]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[1ad]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[85]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[84]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[8f]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[16b]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[7c]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1ae]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[a1]"></a>ADS1246_Init</STRONG> (Thumb, 290 bytes, Stack size 16 bytes, bsp_adc_drive.o(i.ADS1246_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = ADS1246_Init &rArr; ConfigPWM &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMachineParam_HD
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI6ReadAndWrite
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC_ADC
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1246_WaitBusy
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_nms
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteADS1246Reg
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadADS1246Reg
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigPWM
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADD_INPUT_ConfigPWM
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectInit_MM
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backMotorRunFun_mm
</UL>

<P><STRONG><a name="[ac]"></a>ADS1246_WaitBusy</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, bsp_adc_drive.o(i.ADS1246_WaitBusy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADS1246_WaitBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_nms
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1246_Init
</UL>

<P><STRONG><a name="[ae]"></a>Aging_Test</STRONG> (Thumb, 502 bytes, Stack size 8 bytes, motormove.o(i.Aging_Test))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = Aging_Test &rArr; MotorReset &rArr; MoveCardOut &rArr; MotorMove_TD &rArr; MotorPosReset_TD &rArr; SetMotorRunParam_MD &rArr; SendCmdToReg &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_CV_Measure
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC5160_MotorMove
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCalculateReasult_MD
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveCardOut
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorReset
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorMove_TD
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backMotorRunFun_mm
</UL>

<P><STRONG><a name="[ba]"></a>BSP_TIM6_Init</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, bsp_timer.o(i.BSP_TIM6_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BSP_TIM6_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseStructInit
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[bf]"></a>CAN1_Init_CD</STRONG> (Thumb, 272 bytes, Stack size 48 bytes, bsp_can_drive.o(i.CAN1_Init_CD))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = CAN1_Init_CD &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ITConfig
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_FilterInit
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DeInit
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanQueueParmInit
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[1e]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, bsp_can_drive.o(i.CAN1_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CAN1_RX0_IRQHandler &rArr; PushInCanRxMsgQ_BC
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Receive
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GetITStatus
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ClearITPendingBit
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PushInCanRxMsgQ_BC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[c9]"></a>CAN2_Init_CD</STRONG> (Thumb, 268 bytes, Stack size 48 bytes, bsp_can_drive.o(i.CAN2_Init_CD))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = CAN2_Init_CD &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ITConfig
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_FilterInit
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[4a]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, bsp_can_drive.o(i.CAN2_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CAN2_RX0_IRQHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Receive
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GetITStatus
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ClearITPendingBit
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[c6]"></a>CAN_ClearITPendingBit</STRONG> (Thumb, 162 bytes, Stack size 0 bytes, stm32f4xx_can.o(i.CAN_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX0_IRQHandler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[c0]"></a>CAN_DeInit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32f4xx_can.o(i.CAN_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Init_CD
</UL>

<P><STRONG><a name="[c2]"></a>CAN_FilterInit</STRONG> (Thumb, 258 bytes, Stack size 8 bytes, stm32f4xx_can.o(i.CAN_FilterInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_FilterInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_Init_CD
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Init_CD
</UL>

<P><STRONG><a name="[c5]"></a>CAN_GetITStatus</STRONG> (Thumb, 284 bytes, Stack size 16 bytes, stm32f4xx_can.o(i.CAN_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CAN_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX0_IRQHandler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[c3]"></a>CAN_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_can.o(i.CAN_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_Init_CD
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Init_CD
</UL>

<P><STRONG><a name="[c1]"></a>CAN_Init</STRONG> (Thumb, 276 bytes, Stack size 12 bytes, stm32f4xx_can.o(i.CAN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CAN_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_Init_CD
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Init_CD
</UL>

<P><STRONG><a name="[c7]"></a>CAN_Receive</STRONG> (Thumb, 240 bytes, Stack size 8 bytes, stm32f4xx_can.o(i.CAN_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX0_IRQHandler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[d4]"></a>CAN_Transmit</STRONG> (Thumb, 294 bytes, Stack size 8 bytes, stm32f4xx_can.o(i.CAN_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_Send_Msg
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanSendMsg_Task
</UL>

<P><STRONG><a name="[d5]"></a>CAN_TransmitStatus</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, stm32f4xx_can.o(i.CAN_TransmitStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_TransmitStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_Send_Msg
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanSendMsg_Task
</UL>

<P><STRONG><a name="[6e]"></a>Can1CallBack_CP</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, bsp_can_drive.o(i.Can1CallBack_CP))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Can1CallBack_CP &rArr; StartWork &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartWork
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_can_drive.o(i.CanQueueParmInit)
</UL>
<P><STRONG><a name="[cf]"></a>CanSendData_UD</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, bsp_can_drive.o(i.CanSendData_UD))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CanSendData_UD &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueIsFull
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PushInQueue_Q
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg_ToSlove
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg_ToHost
</UL>

<P><STRONG><a name="[d6]"></a>Can_Send_Msg</STRONG> (Thumb, 112 bytes, Stack size 48 bytes, bsp_can_drive.o(i.Can_Send_Msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Can_Send_Msg &rArr; CAN_TransmitStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TransmitStatus
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Suction_Sample_Liq
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LiquidTest_Task
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Debug
</UL>

<P><STRONG><a name="[142]"></a>CharToInt</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, handledata.o(i.CharToInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CharToInt
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backMotorRunFun_mm
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartWork
</UL>

<P><STRONG><a name="[10c]"></a>CheckSum_HD</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, handledata.o(i.CheckSum_HD))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CheckSum_HD
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveMachineParam_HD
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadSystemParm
</UL>

<P><STRONG><a name="[d9]"></a>CleaningNeedle_In</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, motormove.o(i.CleaningNeedle_In))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = CleaningNeedle_In &rArr; MotorMove_TD &rArr; MotorPosReset_TD &rArr; SetMotorRunParam_MD &rArr; SendCmdToReg &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC5160_MotorMove
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorMove_TD
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOptPosSta
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorReset
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backMotorRunFun_mm
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Debug
</UL>

<P><STRONG><a name="[db]"></a>CleaningNeedle_Out</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, motormove.o(i.CleaningNeedle_Out))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CleaningNeedle_Out &rArr; TMC5160_MotorMove &rArr; TMC5160_MotorPosReset &rArr;  TMC5160_MotorMove (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC5160_MotorMove
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOptPosSta
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC5160_speedmode
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC5160_HardStop
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMotor5160Param_MD
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorReset
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backMotorRunFun_mm
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Debug
</UL>

<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[df]"></a>DetectInit_MM</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, motormove.o(i.DetectInit_MM))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = DetectInit_MM &rArr; ADS1246_Init &rArr; ConfigPWM &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1246_Init
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Detect
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetStartSensorFlag
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backMotorRunFun_mm
</UL>

<P><STRONG><a name="[e2]"></a>DetectMotorRunFun_mm</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, backwork.o(i.DetectMotorRunFun_mm))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DetectMotorRunFun_mm &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backMotor2_task
</UL>

<P><STRONG><a name="[e3]"></a>FanDriveInit</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, bsp_walvedrive.o(i.FanDriveInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = FanDriveInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[e7]"></a>Finger_Suction_sample</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, motormove.o(i.Finger_Suction_sample))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Finger_Suction_sample &rArr; MotorMove_TD &rArr; MotorPosReset_TD &rArr; SetMotorRunParam_MD &rArr; SendCmdToReg &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC5160_MotorMove
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorMove_TD
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOptPosSta
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMotorParam_MD
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorMove_LIQ
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backMotorRunFun_mm
</UL>

<P><STRONG><a name="[94]"></a>GPIO_Init</STRONG> (Thumb, 144 bytes, Stack size 20 bytes, stm32f4xx_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Motor_Init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Motor_Init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Motor5160_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_CS_Init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUart
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORKLED_Init
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PumpDriveInit
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSensorIO
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FanDriveInit
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_Init_CD
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Init_CD
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC_ADC
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigPWM
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADD_INPUT_ConfigPWM
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Initial
</UL>

<P><STRONG><a name="[95]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, stm32f4xx_gpio.o(i.GPIO_PinAFConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Motor_Init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUart
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_Init_CD
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Init_CD
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC_ADC
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigPWM
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADD_INPUT_ConfigPWM
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Initial
</UL>

<P><STRONG><a name="[ad]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsWaste_Full
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsHaveCard
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCleaning_Empty
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadADS1246_ADC
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1246_WaitBusy
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSensorFlag_MD
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMotorBusy
</UL>

<P><STRONG><a name="[a6]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Suction_Sample_Liq
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Suction_Sample
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Finger_Suction_sample
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleaningNeedle_Out
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleaningNeedle_In
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1246_Init
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Read
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Sector
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backMotorRunFun_mm
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMotorxCsIO
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Motor_Init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Motor5160_Init
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PumpDriveInit
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FanDriveInit
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartADC_ADC
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadADS1246_ADC
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenCloseLed_ADC
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1246_WaitBusy
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteADS1246Reg
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadADS1246Reg
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Page
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Enable
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadSR
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadID
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enn_motor
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC5160_HardStop
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetStopMotor
</UL>

<P><STRONG><a name="[a8]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleaningNeedle_Out
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleaningNeedle_In
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1246_Init
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Read
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Sector
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backMotorRunFun_mm
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMotorxCsIO
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Motor_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_CS_Init
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORKLED_Init
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FanDriveInit
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartADC_ADC
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadADS1246_ADC
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenCloseLed_ADC
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1246_WaitBusy
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteADS1246Reg
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadADS1246Reg
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Page
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Enable
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadSR
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadID
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enn_motor
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC5160_HardStop
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetStopMotor
</UL>

<P><STRONG><a name="[a2]"></a>GetMachineParam_HD</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, handledata.o(i.GetMachineParam_HD))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_CV_Measure
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1246_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindLineT
</UL>

<P><STRONG><a name="[dc]"></a>GetMotor5160Param_MD</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bsp_motor_drive.o(i.GetMotor5160Param_MD))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC5160_MotorPosReset
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC5160_MotorMove
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Suction_Sample_Liq
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleaningNeedle_Out
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC5160_posmode
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC5160_HardStop
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSensorFlag_MD
</UL>

<P><STRONG><a name="[ea]"></a>GetMotorBusy</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, bsp_motor_drive.o(i.GetMotorBusy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetMotorBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMotorParam_MD
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_CV_Measure
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorMove_TD
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitMotorIdle_TD
</UL>

<P><STRONG><a name="[e8]"></a>GetMotorParam_MD</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bsp_motor_drive.o(i.GetMotorParam_MD))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_CV_Measure
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Suction_Sample
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorMove_TD
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Finger_Suction_sample
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backMotorRunFun_mm
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetStopMotor
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorPosReset_TD
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorMove_LIQ
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSensorFlag_MD
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMotorBusy
</UL>

<P><STRONG><a name="[da]"></a>GetOptPosSta</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, bsp_motor_drive.o(i.GetOptPosSta))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetOptPosSta &rArr; GetSensorFlag_MD
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_delay
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSensorFlag_MD
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC5160_MotorPosReset
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Suction_Sample_Liq
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Suction_Sample
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorMove_TD
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Finger_Suction_sample
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleaningNeedle_Out
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleaningNeedle_In
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backMotorRunFun_mm
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorPosReset_TD
</UL>

<P><STRONG><a name="[d2]"></a>GetQueueNum_Q</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, uartdriver.o(i.GetQueueNum_Q))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanSendMsg_Task
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandlerComm
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartxInterruptHandler
</UL>

<P><STRONG><a name="[eb]"></a>GetSensorFlag_MD</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, bsp_motor_drive.o(i.GetSensorFlag_MD))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetSensorFlag_MD
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMotorParam_MD
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMotor5160Param_MD
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOptPosSta
</UL>

<P><STRONG><a name="[135]"></a>GetStartSensorFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp_sensor.o(i.GetStartSensorFlag))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSensor
</UL>

<P><STRONG><a name="[f0]"></a>HandlerComm</STRONG> (Thumb, 538 bytes, Stack size 40 bytes, uartdriver.o(i.HandlerComm))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = HandlerComm &rArr; Process_Debug &rArr; Suction_Sample_Liq &rArr; MotorMove_LIQ &rArr; MotorPosReset_TD &rArr; SetMotorRunParam_MD &rArr; SendCmdToReg &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg_ToHost
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PopOutQueue_Q
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetQueueNum_Q
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetOutScanState
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitQueue_Q
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Debug
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiReadUART
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[a3]"></a>InitADC_ADC</STRONG> (Thumb, 294 bytes, Stack size 32 bytes, bsp_adc_drive.o(i.InitADC_ADC))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = InitADC_ADC &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1246_Init
</UL>

<P><STRONG><a name="[174]"></a>InitOneLiqParam</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bsp_liquid.o(i.InitOneLiqParam))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[ce]"></a>InitQueue_Q</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, uartdriver.o(i.InitQueue_Q))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = InitQueue_Q
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg_ToSlove
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg_ToHost
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanQueueParmInit
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Scan_Out_Queue
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandlerComm
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUart
</UL>

<P><STRONG><a name="[fd]"></a>InitSensorIO</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, bsp_sensor.o(i.InitSensorIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = InitSensorIO &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[10d]"></a>InitSystemParm</STRONG> (Thumb, 230 bytes, Stack size 0 bytes, handledata.o(i.InitSystemParm))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadSystemParm
</UL>

<P><STRONG><a name="[106]"></a>Init_Scan_Out_Queue</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, uartdriver.o(i.Init_Scan_Out_Queue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Init_Scan_Out_Queue &rArr; InitQueue_Q
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitQueue_Q
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Flag
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScanCodeMode
</UL>

<P><STRONG><a name="[140]"></a>IntToChar</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, handledata.o(i.IntToChar))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestCV_MD
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCalculateReasult_MD
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backMotorRunFun_mm
</UL>

<P><STRONG><a name="[107]"></a>IsCleaning_Empty</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, bsp_sensor.o(i.IsCleaning_Empty))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IsCleaning_Empty
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backMotorRunFun_mm
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorStateOperation
</UL>

<P><STRONG><a name="[108]"></a>IsHaveCard</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, bsp_sensor.o(i.IsHaveCard))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IsHaveCard
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backMotorRunFun_mm
</UL>

<P><STRONG><a name="[109]"></a>IsWaste_Full</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, bsp_sensor.o(i.IsWaste_Full))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IsWaste_Full
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backMotorRunFun_mm
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorStateOperation
</UL>

<P><STRONG><a name="[10a]"></a>LoadSystemParm</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, handledata.o(i.LoadSystemParm))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LoadSystemParm &rArr; SaveMachineParam_HD &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Read
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Sector
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveMachineParam_HD
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSystemParm
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSum_HD
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[110]"></a>MotorInit_MD</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bsp_motor_drive.o(i.MotorInit_MD))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = MotorInit_MD &rArr; IO_Motor_Init &rArr; SendCmdToMotor &rArr; SendCmdToReg &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Motor_Init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Motor_Init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Motor5160_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_CS_Init
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[e9]"></a>MotorMove_LIQ</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, bsp_motor_drive.o(i.MotorMove_LIQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = MotorMove_LIQ &rArr; MotorPosReset_TD &rArr; SetMotorRunParam_MD &rArr; SendCmdToReg &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMotorParam_MD
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorTimeStop
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorTimeReg
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitMotorIdle_TD
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetStopMotor
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMotorMoveParam
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorPosReset_TD
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Suction_Sample_Liq
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Suction_Sample
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Finger_Suction_sample
</UL>

<P><STRONG><a name="[b2]"></a>MotorMove_TD</STRONG> (Thumb, 304 bytes, Stack size 24 bytes, bsp_motor_drive.o(i.MotorMove_TD))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = MotorMove_TD &rArr; MotorPosReset_TD &rArr; SetMotorRunParam_MD &rArr; SendCmdToReg &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOptPosSta
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMotorParam_MD
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorTimeStop
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorTimeReg
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorTimeOut
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitMotorIdle_TD
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetStopMotor
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMotorRunParam_MD
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMotorMoveParam
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorPosReset_TD
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMotorBusy
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_CV_Measure
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveCardOut
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorReset
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Finger_Suction_sample
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleaningNeedle_In
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Aging_Test
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backMotorRunFun_mm
</UL>

<P><STRONG><a name="[112]"></a>MotorPosReset_TD</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, bsp_motor_drive.o(i.MotorPosReset_TD))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = MotorPosReset_TD &rArr; SetMotorRunParam_MD &rArr; SendCmdToReg &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOptPosSta
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMotorParam_MD
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorTimeStop
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorTimeReg
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorTimeOut
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitMotorIdle_TD
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetStopMotor
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMotorRunParam_MD
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMotorMoveParam
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveCardOut
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorMove_TD
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorMove_LIQ
</UL>

<P><STRONG><a name="[af]"></a>MotorReset</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, motormove.o(i.MotorReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = MotorReset &rArr; MoveCardOut &rArr; MotorMove_TD &rArr; MotorPosReset_TD &rArr; SetMotorRunParam_MD &rArr; SendCmdToReg &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC5160_MotorMove
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveCardOut
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorMove_TD
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleaningNeedle_Out
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleaningNeedle_In
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Aging_Test
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backMotorRunFun_mm
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleTimeoutFun
</UL>

<P><STRONG><a name="[118]"></a>MotorTimeOut</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, drivermotortime.o(i.MotorTimeOut))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Suction_Sample_Liq
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorMove_TD
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitMotorIdle_TD
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorPosReset_TD
</UL>

<P><STRONG><a name="[113]"></a>MotorTimeReg</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, drivermotortime.o(i.MotorTimeReg))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Suction_Sample_Liq
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorMove_TD
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorPosReset_TD
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorMove_LIQ
</UL>

<P><STRONG><a name="[117]"></a>MotorTimeStop</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, drivermotortime.o(i.MotorTimeStop))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Suction_Sample_Liq
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorMove_TD
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorPosReset_TD
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorMove_LIQ
</UL>

<P><STRONG><a name="[11a]"></a>MotorTimerInit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, drivermotortime.o(i.MotorTimerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MotorTimerInit &rArr; Tim2BspInit &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim2BspInit
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[175]"></a>MotorTimerTask</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, drivermotortime.o(i.MotorTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MotorTimerTask
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_RunPer100ms
</UL>

<P><STRONG><a name="[b3]"></a>MoveCardOut</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, motormove.o(i.MoveCardOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = MoveCardOut &rArr; MotorMove_TD &rArr; MotorPosReset_TD &rArr; SetMotorRunParam_MD &rArr; SendCmdToReg &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorMove_TD
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorPosReset_TD
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorReset
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Aging_Test
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backMotorRunFun_mm
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Debug
</UL>

<P><STRONG><a name="[11d]"></a>MultiReadUART</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, uartdriver.o(i.MultiReadUART))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = MultiReadUART &rArr; HandlerComm &rArr; Process_Debug &rArr; Suction_Sample_Liq &rArr; MotorMove_LIQ &rArr; MotorPosReset_TD &rArr; SetMotorRunParam_MD &rArr; SendCmdToReg &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandlerComm
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiCommRead_Task
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[be]"></a>NVIC_Init</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUart
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_Init_CD
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Init_CD
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TIM6_Init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim2BspInit
</UL>

<P><STRONG><a name="[173]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[11f]"></a>OpenCloseLed_ADC</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bsp_adc_drive.o(i.OpenCloseLed_ADC))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OpenCloseLed_ADC
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_CV_Measure
</UL>

<P><STRONG><a name="[100]"></a>Pin2PinSource</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, uartdriver.o(i.Pin2PinSource))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUart
</UL>

<P><STRONG><a name="[120]"></a>PopOutCanRxMsgQ_BC</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, bsp_can_drive.o(i.PopOutCanRxMsgQ_BC))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PopOutCanRxMsgQ_BC
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCanMsg
</UL>

<P><STRONG><a name="[d3]"></a>PopOutQueue_Q</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, uartdriver.o(i.PopOutQueue_Q))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PopOutQueue_Q
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanSendMsg_Task
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandlerComm
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartxInterruptHandler
</UL>

<P><STRONG><a name="[f4]"></a>Process_Debug</STRONG> (Thumb, 1524 bytes, Stack size 16 bytes, app_debug.o(i.Process_Debug))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = Process_Debug &rArr; Suction_Sample_Liq &rArr; MotorMove_LIQ &rArr; MotorPosReset_TD &rArr; SetMotorRunParam_MD &rArr; SendCmdToReg &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC5160_MotorMove
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Suction_Sample_Liq
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveCardOut
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleaningNeedle_Out
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleaningNeedle_In
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Read
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_Send_Msg
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandlerComm
</UL>

<P><STRONG><a name="[123]"></a>PumpDriveInit</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, bsp_walvedrive.o(i.PumpDriveInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = PumpDriveInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[c8]"></a>PushInCanRxMsgQ_BC</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, bsp_can_drive.o(i.PushInCanRxMsgQ_BC))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PushInCanRxMsgQ_BC
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[d1]"></a>PushInQueue_Q</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, uartdriver.o(i.PushInQueue_Q))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PushInQueue_Q
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanSendData_UD
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartxSendData_UD
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartxInterruptHandler
</UL>

<P><STRONG><a name="[d0]"></a>QueueIsFull</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, uartdriver.o(i.QueueIsFull))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanSendData_UD
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartxSendData_UD
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartxInterruptHandler
</UL>

<P><STRONG><a name="[92]"></a>RCC_AHB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_AHB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Motor_Init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Motor_Init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Motor5160_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_CS_Init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUart
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORKLED_Init
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PumpDriveInit
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSensorIO
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FanDriveInit
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_Init_CD
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Init_CD
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC_ADC
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigPWM
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADD_INPUT_ConfigPWM
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Initial
</UL>

<P><STRONG><a name="[bb]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUart
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_Init_CD
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Init_CD
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TIM6_Init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigPWM
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Initial
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim2BspInit
</UL>

<P><STRONG><a name="[ca]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DeInit
</UL>

<P><STRONG><a name="[93]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Motor_Init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUart
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC_ADC
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADD_INPUT_ConfigPWM
</UL>

<P><STRONG><a name="[14c]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>

<P><STRONG><a name="[156]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 214 bytes, Stack size 20 bytes, stm32f4xx_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[124]"></a>ReadADS1246_ADC</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, bsp_adc_drive.o(i.ReadADS1246_ADC))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ReadADS1246_ADC
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI6ReadAndWrite
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_CV_Measure
</UL>

<P><STRONG><a name="[125]"></a>ReadCanMsg</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, bsp_can_drive.o(i.ReadCanMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ReadCanMsg &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PopOutCanRxMsgQ_BC
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMutiCanMsg_BC
</UL>

<P><STRONG><a name="[11e]"></a>ReadMutiCanMsg_BC</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bsp_can_drive.o(i.ReadMutiCanMsg_BC))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ReadMutiCanMsg_BC &rArr; ReadCanMsg &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCanMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiCommRead_Task
</UL>

<P><STRONG><a name="[d8]"></a>ResetSendFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_sensor.o(i.ResetSendFlag))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Liquid_State_Task
</UL>

<P><STRONG><a name="[a9]"></a>SPI6ReadAndWrite</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, bsp_adc_drive.o(i.SPI6ReadAndWrite))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1246_Init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadADS1246_ADC
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteADS1246Reg
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadADS1246Reg
</UL>

<P><STRONG><a name="[fb]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Motor_Init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC_ADC
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SetSpeed
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Initial
</UL>

<P><STRONG><a name="[128]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_I2S_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReadWriteByte
</UL>

<P><STRONG><a name="[12a]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_I2S_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReadWriteByte
</UL>

<P><STRONG><a name="[129]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_I2S_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReadWriteByte
</UL>

<P><STRONG><a name="[fc]"></a>SPI_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f4xx_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Motor_Init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitADC_ADC
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Initial
</UL>

<P><STRONG><a name="[127]"></a>SPI_ReadWriteByte</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, bsp_spiflash.o(i.SPI_ReadWriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Read
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Sector
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Page
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Enable
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadSR
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadID
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Initial
</UL>

<P><STRONG><a name="[12b]"></a>SPI_SetSpeed</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, bsp_spiflash.o(i.SPI_SetSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_SetSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
</UL>

<P><STRONG><a name="[10f]"></a>SaveMachineParam_HD</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, handledata.o(i.SaveMachineParam_HD))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SaveMachineParam_HD &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSum_HD
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadSystemParm
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backMotorRunFun_mm
</UL>

<P><STRONG><a name="[167]"></a>ScanUartRevBuf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, uartdriver.o(i.ScanUartRevBuf))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Flag
</UL>

<P><STRONG><a name="[12e]"></a>SendCmdToReg</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, bsp_motor_drive.o(i.SendCmdToReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SendCmdToReg &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMotorxCsIO
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI4ReadAndWrite
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMotorMaxSpeed
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMotorAccDec
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmdToMotor
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMotorRunParam_MD
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMotorMoveParam
</UL>

<P><STRONG><a name="[f3]"></a>SendMsg_ToHost</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, bsp_can_drive.o(i.SendMsg_ToHost))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SendMsg_ToHost &rArr; CanSendData_UD &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanSendData_UD
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitQueue_Q
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitOutScanData_BC
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestCV_MD
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCalculateReasult_MD
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backMotorRunFun_mm
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartWork
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandlerComm
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSensor
</UL>

<P><STRONG><a name="[133]"></a>SendMsg_ToSlove</STRONG> (Thumb, 192 bytes, Stack size 48 bytes, bsp_can_drive.o(i.SendMsg_ToSlove))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SendMsg_ToSlove &rArr; CanSendData_UD &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanSendData_UD
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitQueue_Q
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backMotorRunFun_mm
</UL>

<P><STRONG><a name="[d7]"></a>SensorStateOperation</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, bsp_sensor.o(i.SensorStateOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SensorStateOperation &rArr; SendSensor &rArr; SendMsg_ToHost &rArr; CanSendData_UD &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsWaste_Full
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCleaning_Empty
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSensor
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Liquid_State_Task
</UL>

<P><STRONG><a name="[136]"></a>SetMotorAccDec</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, bsp_motor_drive.o(i.SetMotorAccDec))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SetMotorAccDec &rArr; SendCmdToReg &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmdToReg
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backMotorRunFun_mm
</UL>

<P><STRONG><a name="[137]"></a>SetMotorMaxSpeed</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, bsp_motor_drive.o(i.SetMotorMaxSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SetMotorMaxSpeed &rArr; SendCmdToReg &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmdToReg
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backMotorRunFun_mm
</UL>

<P><STRONG><a name="[114]"></a>SetMotorMoveParam</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, bsp_motor_drive.o(i.SetMotorMoveParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SetMotorMoveParam &rArr; SendCmdToReg &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmdToReg
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorMove_TD
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorPosReset_TD
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorMove_LIQ
</UL>

<P><STRONG><a name="[119]"></a>SetMotorRunParam_MD</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, bsp_motor_drive.o(i.SetMotorRunParam_MD))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SetMotorRunParam_MD &rArr; SendCmdToReg &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmdToReg
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_CV_Measure
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorMove_TD
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorPosReset_TD
</UL>

<P><STRONG><a name="[f5]"></a>SetOutScanState</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bsp_scan.o(i.SetOutScanState))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitOutScanData_BC
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandlerComm
</UL>

<P><STRONG><a name="[138]"></a>SetScanCodeMode</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, bsp_scan.o(i.SetScanCodeMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SetScanCodeMode &rArr; Write_Flag &rArr; UartxSendData_UD &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Scan_Out_Queue
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Flag
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitOutScanData_BC
</UL>

<P><STRONG><a name="[e0]"></a>SetStartSensorFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp_sensor.o(i.SetStartSensorFlag))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectInit_MM
</UL>

<P><STRONG><a name="[116]"></a>SetStopMotor</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, bsp_motor_drive.o(i.SetStopMotor))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetStopMotor
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMotorParam_MD
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_CV_Measure
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorMove_TD
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopAllMotor
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorPosReset_TD
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorMove_LIQ
</UL>

<P><STRONG><a name="[13b]"></a>StartADC_ADC</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bsp_adc_drive.o(i.StartADC_ADC))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = StartADC_ADC
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_CV_Measure
</UL>

<P><STRONG><a name="[b5]"></a>StartCalculateReasult_MD</STRONG> (Thumb, 1804 bytes, Stack size 40 bytes, c_t_value.o(i.StartCalculateReasult_MD))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = StartCalculateReasult_MD &rArr; SearchAllPeak &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg_ToHost
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntToChar
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchBackPeak
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchAllSmoothPoint
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchAllPeak
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateAllTC
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Aging_Test
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backMotorRunFun_mm
</UL>

<P><STRONG><a name="[cc]"></a>StartWork</STRONG> (Thumb, 1366 bytes, Stack size 24 bytes, bsp_work.o(i.StartWork))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = StartWork &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg_ToHost
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CharToInt
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can1CallBack_CP
</UL>

<P><STRONG><a name="[ed]"></a>StopAllMotor</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bsp_motor_drive.o(i.StopAllMotor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = StopAllMotor &rArr; SetStopMotor
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetStopMotor
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleTimeoutFun
</UL>

<P><STRONG><a name="[143]"></a>Suction_Sample</STRONG> (Thumb, 3528 bytes, Stack size 104 bytes, motormove.o(i.Suction_Sample))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = Suction_Sample &rArr; MotorMove_LIQ &rArr; MotorPosReset_TD &rArr; SetMotorRunParam_MD &rArr; SendCmdToReg &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC5160_MotorMove
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOptPosSta
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMotorParam_MD
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC5160_speedmode
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC5160_HardStop
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorMove_LIQ
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backMotorRunFun_mm
</UL>

<P><STRONG><a name="[122]"></a>Suction_Sample_Liq</STRONG> (Thumb, 962 bytes, Stack size 80 bytes, motormove.o(i.Suction_Sample_Liq))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = Suction_Sample_Liq &rArr; MotorMove_LIQ &rArr; MotorPosReset_TD &rArr; SetMotorRunParam_MD &rArr; SendCmdToReg &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC5160_MotorMove
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOptPosSta
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_Send_Msg
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorTimeStop
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorTimeReg
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorTimeOut
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC5160_speedmode
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC5160_HardStop
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorMove_LIQ
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMotor5160Param_MD
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backMotorRunFun_mm
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Debug
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, port.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SysTick_Handler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>SystemInit</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, system_stm32f4xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(.text)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, drivermotortime.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIM2_IRQHandler &rArr; MotorTimerInt &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorTimerInt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bsp_timer.o(i.TIM6_DAC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM6_DAC_IRQHandler &rArr; SysTick_ISR &rArr; bsp_RunPer100ms &rArr; MotorTimerTask
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_ARRPreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TIM6_Init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigPWM
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADD_INPUT_ConfigPWM
</UL>

<P><STRONG><a name="[9e]"></a>TIM_CCxCmd</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, stm32f4xx_tim.o(i.TIM_CCxCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_CCxCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigPWM
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADD_INPUT_ConfigPWM
</UL>

<P><STRONG><a name="[99]"></a>TIM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TIM6_Init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigPWM
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADD_INPUT_ConfigPWM
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim2BspInit
</UL>

<P><STRONG><a name="[14b]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_DAC_IRQHandler
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[a0]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TIM6_Init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigPWM
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADD_INPUT_ConfigPWM
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim2BspInit
</UL>

<P><STRONG><a name="[9f]"></a>TIM_CtrlPWMOutputs</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_CtrlPWMOutputs))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigPWM
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADD_INPUT_ConfigPWM
</UL>

<P><STRONG><a name="[bc]"></a>TIM_DeInit</STRONG> (Thumb, 346 bytes, Stack size 8 bytes, stm32f4xx_tim.o(i.TIM_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TIM6_Init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim2BspInit
</UL>

<P><STRONG><a name="[14a]"></a>TIM_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32f4xx_tim.o(i.TIM_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_DAC_IRQHandler
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[bd]"></a>TIM_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TIM6_Init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim2BspInit
</UL>

<P><STRONG><a name="[9a]"></a>TIM_OC4Init</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, stm32f4xx_tim.o(i.TIM_OC4Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC4Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigPWM
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADD_INPUT_ConfigPWM
</UL>

<P><STRONG><a name="[9c]"></a>TIM_OC4PolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_OC4PolarityConfig))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigPWM
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADD_INPUT_ConfigPWM
</UL>

<P><STRONG><a name="[9b]"></a>TIM_OC4PreloadConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_OC4PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigPWM
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADD_INPUT_ConfigPWM
</UL>

<P><STRONG><a name="[9d]"></a>TIM_SelectOCxM</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32f4xx_tim.o(i.TIM_SelectOCxM))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_SelectOCxM
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigPWM
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADD_INPUT_ConfigPWM
</UL>

<P><STRONG><a name="[97]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TIM6_Init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigPWM
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADD_INPUT_ConfigPWM
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim2BspInit
</UL>

<P><STRONG><a name="[96]"></a>TIM_TimeBaseStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_TimeBaseStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TIM6_Init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigPWM
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADD_INPUT_ConfigPWM
</UL>

<P><STRONG><a name="[de]"></a>TMC5160_HardStop</STRONG> (Thumb, 282 bytes, Stack size 16 bytes, bsp_motor_drive.o(i.TMC5160_HardStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TMC5160_HardStop &rArr; TMC5160_read_XACTUAL &rArr; TMC5160_ReadData &rArr; SetMotorxCsIO
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC5160_read_XACTUAL
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC5160_SendData
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_delay
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMotor5160Param_MD
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC5160_MotorPosReset
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Suction_Sample_Liq
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Suction_Sample
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleaningNeedle_Out
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleTimeoutFun
</UL>

<P><STRONG><a name="[b0]"></a>TMC5160_MotorMove</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, bsp_motor_drive.o(i.TMC5160_MotorMove))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = TMC5160_MotorMove &rArr; TMC5160_MotorPosReset &rArr;  TMC5160_MotorMove (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC5160_read_XACTUAL
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC5160_SendData
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC5160_MotorPosReset
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitMotorIdle
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC5160_read_XTARGET
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC5160_posmode
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMotor5160Param_MD
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC5160_MotorPosReset
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Suction_Sample_Liq
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Suction_Sample
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorReset
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Finger_Suction_sample
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleaningNeedle_Out
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleaningNeedle_In
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Aging_Test
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backMotorRunFun_mm
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Debug
</UL>

<P><STRONG><a name="[ef]"></a>TMC5160_MotorPosReset</STRONG> (Thumb, 244 bytes, Stack size 16 bytes, bsp_motor_drive.o(i.TMC5160_MotorPosReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + In Cycle
<LI>Call Chain = TMC5160_MotorPosReset &rArr;  TMC5160_MotorMove (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC5160_MotorMove
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOptPosSta
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_delay
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enn_motor
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitMotorIdle
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC5160_speedmode
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC5160_posmode
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC5160_HardStop
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMotor5160Param_MD
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC5160_MotorMove
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backMotorRunFun_mm
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleTimeoutFun
</UL>

<P><STRONG><a name="[151]"></a>TMC5160_ReadData</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, bsp_motor_drive.o(i.TMC5160_ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TMC5160_ReadData &rArr; SetMotorxCsIO
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMotorxCsIO
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI4ReadAndWrite
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC5160_read_XACTUAL
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitMotorIdle
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC5160_read_XTARGET
</UL>

<P><STRONG><a name="[152]"></a>TMC5160_ReadState</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, bsp_motor_drive.o(i.TMC5160_ReadState))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TMC5160_ReadState &rArr; SetMotorxCsIO
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMotorxCsIO
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI4ReadAndWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitMotorIdle
</UL>

<P><STRONG><a name="[12f]"></a>TMC5160_SendData</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, bsp_motor_drive.o(i.TMC5160_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TMC5160_SendData &rArr; SetMotorxCsIO
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMotorxCsIO
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI4ReadAndWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC5160_MotorMove
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backMotorRunFun_mm
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmdToMotor5160
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enn_motor
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC5160_speedmode
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC5160_posmode
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC5160_HardStop
</UL>

<P><STRONG><a name="[14f]"></a>TMC5160_posmode</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, bsp_motor_drive.o(i.TMC5160_posmode))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TMC5160_posmode &rArr; TMC5160_read_XACTUAL &rArr; TMC5160_ReadData &rArr; SetMotorxCsIO
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC5160_read_XACTUAL
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC5160_SendData
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMotor5160Param_MD
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC5160_MotorPosReset
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC5160_MotorMove
</UL>

<P><STRONG><a name="[14d]"></a>TMC5160_read_XACTUAL</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bsp_motor_drive.o(i.TMC5160_read_XACTUAL))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TMC5160_read_XACTUAL &rArr; TMC5160_ReadData &rArr; SetMotorxCsIO
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC5160_ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC5160_MotorMove
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backMotorRunFun_mm
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC5160_posmode
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC5160_HardStop
</UL>

<P><STRONG><a name="[150]"></a>TMC5160_read_XTARGET</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bsp_motor_drive.o(i.TMC5160_read_XTARGET))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TMC5160_read_XTARGET &rArr; TMC5160_ReadData &rArr; SetMotorxCsIO
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC5160_ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC5160_MotorMove
</UL>

<P><STRONG><a name="[dd]"></a>TMC5160_speedmode</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, bsp_motor_drive.o(i.TMC5160_speedmode))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TMC5160_speedmode &rArr; TMC5160_SendData &rArr; SetMotorxCsIO
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC5160_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC5160_MotorPosReset
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Suction_Sample_Liq
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Suction_Sample
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleaningNeedle_Out
</UL>

<P><STRONG><a name="[153]"></a>TestCV_MD</STRONG> (Thumb, 1432 bytes, Stack size 32 bytes, c_t_value.o(i.TestCV_MD))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = TestCV_MD &rArr; SendMsg_ToHost &rArr; CanSendData_UD &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg_ToHost
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntToChar
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindLineT
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindLineC
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backMotorRunFun_mm
</UL>

<P><STRONG><a name="[b4]"></a>Test_CV_Measure</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, c_t_value.o(i.Test_CV_Measure))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Test_CV_Measure &rArr; MotorMove_TD &rArr; MotorPosReset_TD &rArr; SetMotorRunParam_MD &rArr; SendCmdToReg &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorMove_TD
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMotorParam_MD
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMachineParam_HD
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_delay
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartADC_ADC
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadADS1246_ADC
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenCloseLed_ADC
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetStopMotor
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMotorRunParam_MD
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMotorBusy
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Aging_Test
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backMotorRunFun_mm
</UL>

<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uartdriver.o(i.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = UART4_IRQHandler &rArr; UartxInterruptHandler &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartxInterruptHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uartdriver.o(i.UART5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = UART5_IRQHandler &rArr; UartxInterruptHandler &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartxInterruptHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>UART7_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uartdriver.o(i.UART7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = UART7_IRQHandler &rArr; UartxInterruptHandler &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartxInterruptHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>UART8_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uartdriver.o(i.UART8_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = UART8_IRQHandler &rArr; UartxInterruptHandler &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartxInterruptHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uartdriver.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USART1_IRQHandler &rArr; UartxInterruptHandler &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartxInterruptHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uartdriver.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USART2_IRQHandler &rArr; UartxInterruptHandler &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartxInterruptHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uartdriver.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USART3_IRQHandler &rArr; UartxInterruptHandler &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartxInterruptHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>USART6_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uartdriver.o(i.USART6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USART6_IRQHandler &rArr; UartxInterruptHandler &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartxInterruptHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[104]"></a>USART_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUart
</UL>

<P><STRONG><a name="[15b]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f4xx_usart.o(i.USART_ClearITPendingBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartxInterruptHandler
</UL>

<P><STRONG><a name="[101]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUart
</UL>

<P><STRONG><a name="[177]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[159]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f4xx_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartxInterruptHandler
</UL>

<P><STRONG><a name="[103]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f4xx_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartxSendData_UD
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartxInterruptHandler
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUart
</UL>

<P><STRONG><a name="[102]"></a>USART_Init</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, stm32f4xx_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUart
</UL>

<P><STRONG><a name="[15a]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartxInterruptHandler
</UL>

<P><STRONG><a name="[15c]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartxInterruptHandler
</UL>

<P><STRONG><a name="[70]"></a>Uart1CallBack_SC</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, uartcallback.o(i.Uart1CallBack_SC))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Uart1CallBack_SC
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartCallBack_SC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uartdriver.o(i.UartConfig_UD)
</UL>
<P><STRONG><a name="[71]"></a>Uart2CallBack_SC</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, uartcallback.o(i.Uart2CallBack_SC))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Uart2CallBack_SC
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartCallBack_SC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uartdriver.o(i.UartConfig_UD)
</UL>
<P><STRONG><a name="[72]"></a>Uart3CallBack_SC</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, uartcallback.o(i.Uart3CallBack_SC))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Uart3CallBack_SC
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartCallBack_SC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uartdriver.o(i.UartConfig_UD)
</UL>
<P><STRONG><a name="[73]"></a>Uart4CallBack_SC</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, uartcallback.o(i.Uart4CallBack_SC))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Uart4CallBack_SC
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartCallBack_SC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uartdriver.o(i.UartConfig_UD)
</UL>
<P><STRONG><a name="[74]"></a>Uart5CallBack_SC</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, uartcallback.o(i.Uart5CallBack_SC))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Uart5CallBack_SC
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartCallBack_SC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uartdriver.o(i.UartConfig_UD)
</UL>
<P><STRONG><a name="[75]"></a>Uart6CallBack_SC</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, uartcallback.o(i.Uart6CallBack_SC))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Uart6CallBack_SC
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartCallBack_SC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uartdriver.o(i.UartConfig_UD)
</UL>
<P><STRONG><a name="[76]"></a>Uart7CallBack_SC</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, uartcallback.o(i.Uart7CallBack_SC))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Uart7CallBack_SC
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartCallBack_SC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uartdriver.o(i.UartConfig_UD)
</UL>
<P><STRONG><a name="[77]"></a>Uart8CallBack_SC</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, uartcallback.o(i.Uart8CallBack_SC))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Uart8CallBack_SC
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartCallBack_SC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uartdriver.o(i.UartConfig_UD)
</UL>
<P><STRONG><a name="[158]"></a>UartConfig_UD</STRONG> (Thumb, 1490 bytes, Stack size 8 bytes, uartdriver.o(i.UartConfig_UD))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = UartConfig_UD &rArr; InitUart &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUart
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[15d]"></a>UartxSendData_UD</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, uartdriver.o(i.UartxSendData_UD))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = UartxSendData_UD &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueIsFull
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PushInQueue_Q
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Flag
</UL>

<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[e1]"></a>W25QXX_Detect</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, bsp_spiflash.o(i.W25QXX_Detect))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = W25QXX_Detect &rArr; W25QXX_ReadID &rArr; SPI_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadID
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectInit_MM
</UL>

<P><STRONG><a name="[10e]"></a>W25QXX_Erase_Sector</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, bsp_spiflash.o(i.W25QXX_Erase_Sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = W25QXX_Erase_Sector &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Enable
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Wait_Busy
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadSystemParm
</UL>

<P><STRONG><a name="[161]"></a>W25QXX_Init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, bsp_spiflash.o(i.W25QXX_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = W25QXX_Init &rArr; SPI_Initial &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SetSpeed
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Initial
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[10b]"></a>W25QXX_Read</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, bsp_spiflash.o(i.W25QXX_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = W25QXX_Read &rArr; SPI_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadSystemParm
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Debug
</UL>

<P><STRONG><a name="[15e]"></a>W25QXX_ReadID</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, bsp_spiflash.o(i.W25QXX_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = W25QXX_ReadID &rArr; SPI_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Detect
</UL>

<P><STRONG><a name="[162]"></a>W25QXX_ReadSR</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, bsp_spiflash.o(i.W25QXX_ReadSR))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = W25QXX_ReadSR &rArr; SPI_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Wait_Busy
</UL>

<P><STRONG><a name="[160]"></a>W25QXX_Wait_Busy</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bsp_spiflash.o(i.W25QXX_Wait_Busy))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadSR
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Sector
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Page
</UL>

<P><STRONG><a name="[12c]"></a>W25QXX_Write</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, bsp_spiflash.o(i.W25QXX_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Read
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Sector
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_NoCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Suction_Sample_Liq
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveMachineParam_HD
</UL>

<P><STRONG><a name="[15f]"></a>W25QXX_Write_Enable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bsp_spiflash.o(i.W25QXX_Write_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = W25QXX_Write_Enable &rArr; SPI_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Sector
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Page
</UL>

<P><STRONG><a name="[163]"></a>W25QXX_Write_NoCheck</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, bsp_spiflash.o(i.W25QXX_Write_NoCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Page
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write
</UL>

<P><STRONG><a name="[164]"></a>W25QXX_Write_Page</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, bsp_spiflash.o(i.W25QXX_Write_Page))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Enable
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Wait_Busy
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_NoCheck
</UL>

<P><STRONG><a name="[165]"></a>WORKLED_Init</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, bsp_led.o(i.WORKLED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = WORKLED_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[14e]"></a>WaitMotorIdle</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, bsp_motor_drive.o(i.WaitMotorIdle))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WaitMotorIdle &rArr; TMC5160_ReadState &rArr; SetMotorxCsIO
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_delay
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC5160_ReadState
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC5160_ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC5160_MotorPosReset
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC5160_MotorMove
</UL>

<P><STRONG><a name="[115]"></a>WaitMotorIdle_TD</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, bsp_motor_drive.o(i.WaitMotorIdle_TD))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WaitMotorIdle_TD &rArr; GetMotorBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorTimeOut
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMotorBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorMove_TD
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorPosReset_TD
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorMove_LIQ
</UL>

<P><STRONG><a name="[166]"></a>WaitOutScanData_BC</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, bsp_scan.o(i.WaitOutScanData_BC))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = WaitOutScanData_BC &rArr; SetScanCodeMode &rArr; Write_Flag &rArr; UartxSendData_UD &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg_ToHost
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetOutScanState
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScanCodeMode
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backMotorRunFun_mm
</UL>

<P><STRONG><a name="[139]"></a>Write_Flag</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, bsp_scan.o(i.Write_Flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Write_Flag &rArr; UartxSendData_UD &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartxSendData_UD
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanUartRevBuf
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Scan_Out_Queue
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScanCodeMode
</UL>

<P><STRONG><a name="[168]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1af]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[a5]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitOutScanData_BC
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_CV_Measure
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestCV_MD
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC5160_MotorPosReset
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Suction_Sample_Liq
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Suction_Sample
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCalculateReasult_MD
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorMove_TD
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectInit_MM
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Aging_Test
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1246_Init
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backMotorRunFun_mm
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectMotorRunFun_mm
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LiquidTest_Task
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCanMsg
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanSendData_UD
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX0_IRQHandler
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandlerComm
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Debug
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchAllPeak
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Detect
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorTimerInt
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleTimeoutFun
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSensor
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorMove_LIQ
</UL>

<P><STRONG><a name="[1b0]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[1b1]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[1b2]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1b3]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1b4]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[170]"></a>backMotorRunFun_mm</STRONG> (Thumb, 8014 bytes, Stack size 56 bytes, backwork.o(i.backMotorRunFun_mm))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = backMotorRunFun_mm &rArr; Suction_Sample &rArr; MotorMove_LIQ &rArr; MotorPosReset_TD &rArr; SetMotorRunParam_MD &rArr; SendCmdToReg &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitOutScanData_BC
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_CV_Measure
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestCV_MD
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC5160_read_XACTUAL
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC5160_SendData
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC5160_MotorPosReset
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC5160_MotorMove
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Suction_Sample_Liq
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Suction_Sample
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCalculateReasult_MD
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMotorMaxSpeed
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMotorAccDec
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg_ToSlove
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg_ToHost
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveCardOut
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorReset
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorMove_TD
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsWaste_Full
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsHaveCard
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCleaning_Empty
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOptPosSta
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMotorParam_MD
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Finger_Suction_sample
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectInit_MM
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleaningNeedle_Out
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleaningNeedle_In
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Aging_Test
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1246_Init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveMachineParam_HD
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntToChar
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CharToInt
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backMotor1_task
</UL>

<P><STRONG><a name="[172]"></a>bsp_Init</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, bsp.o(i.bsp_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = bsp_Init &rArr; MotorInit_MD &rArr; IO_Motor_Init &rArr; SendCmdToMotor &rArr; SendCmdToReg &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1246_Init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadSystemParm
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORKLED_Init
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartConfig_UD
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PumpDriveInit
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorTimerInit
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorInit_MD
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSensorIO
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitOneLiqParam
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FanDriveInit
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_Init_CD
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Init_CD
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TIM6_Init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[147]"></a>bsp_RunPer100ms</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bsp.o(i.bsp_RunPer100ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bsp_RunPer100ms &rArr; MotorTimerTask
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorTimerTask
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_ISR
</UL>

<P><STRONG><a name="[148]"></a>bsp_RunPer500ms</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp.o(i.bsp_RunPer500ms))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_ISR
</UL>

<P><STRONG><a name="[16f]"></a>createBackTask1Queue</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bsp_can_drive.o(i.createBackTask1Queue))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = createBackTask1Queue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backMotor1_task
</UL>

<P><STRONG><a name="[171]"></a>createBackTask2Queue</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bsp_can_drive.o(i.createBackTask2Queue))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = createBackTask2Queue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backMotor2_task
</UL>

<P><STRONG><a name="[13a]"></a>delay_ms</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, bsp_motor_drive.o(i.delay_ms))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitMotorIdle_TD
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopAllMotor
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetStopMotor
</UL>

<P><STRONG><a name="[ee]"></a>enn_motor</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, bsp_motor_drive.o(i.enn_motor))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = enn_motor &rArr; TMC5160_SendData &rArr; SetMotorxCsIO
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC5160_SendData
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC5160_MotorPosReset
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleTimeoutFun
</UL>

<P><STRONG><a name="[13c]"></a>filter</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, c_t_value.o(i.filter))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestCV_MD
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCalculateReasult_MD
</UL>

<P><STRONG><a name="[78]"></a>fputc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, uartdriver.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[65]"></a>main</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = main &rArr; bsp_Init &rArr; MotorInit_MD &rArr; IO_Motor_Init &rArr; SendCmdToMotor &rArr; SendCmdToReg &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[154]"></a>ms_delay</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, c_t_value.o(i.ms_delay))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_CV_Measure
</UL>

<P><STRONG><a name="[17c]"></a>pvPortMalloc</STRONG> (Thumb, 296 bytes, Stack size 24 bytes, heap_4.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAllocateTCBAndStack
</UL>

<P><STRONG><a name="[199]"></a>pvTaskIncrementMutexHeldCount</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tasks.o(i.pvTaskIncrementMutexHeldCount))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[19c]"></a>pxPortInitialiseStack</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[ec]"></a>us_delay</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, bsp_motor_drive.o(i.us_delay))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC5160_MotorPosReset
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsWaste_Full
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsHaveCard
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCleaning_Empty
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOptPosSta
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleTimeoutFun
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitMotorIdle
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC5160_ReadData
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC5160_HardStop
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmdToReg
</UL>

<P><STRONG><a name="[181]"></a>uxListRemove</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[189]"></a>vListInitialise</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
</UL>

<P><STRONG><a name="[187]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTCBVariables
</UL>

<P><STRONG><a name="[17a]"></a>vListInsert</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[192]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[b7]"></a>vPortEnterCritical</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveMachineParam_HD
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskCreate
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[b9]"></a>vPortExitCritical</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveMachineParam_HD
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskCreate
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[17d]"></a>vPortFree</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, heap_4.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAllocateTCBAndStack
</UL>

<P><STRONG><a name="[195]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, port.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[b1]"></a>vTaskDelay</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitOutScanData_BC
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestCV_MD
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC5160_MotorPosReset
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC5160_MotorMove
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Suction_Sample_Liq
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Suction_Sample
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCalculateReasult_MD
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorMove_TD
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleaningNeedle_Out
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleaningNeedle_In
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Aging_Test
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backMotorRunFun_mm
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backMotor2_task
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backMotor1_task
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiCommRead_Task
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LiquidTest_Task
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Liquid_State_Task
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanSendMsg_Task
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmdToMotor
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Motor_Init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandlerComm
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleTimeoutFun
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSensor
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorPosReset_TD
</UL>

<P><STRONG><a name="[18e]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[191]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[193]"></a>vTaskPriorityInherit</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, tasks.o(i.vTaskPriorityInherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskPriorityInherit
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[19a]"></a>vTaskSetTimeOutState</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, tasks.o(i.vTaskSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
</UL>

<P><STRONG><a name="[178]"></a>vTaskStartScheduler</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = vTaskStartScheduler &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17f]"></a>vTaskSuspendAll</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[7d]"></a>vTaskSwitchContext</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[194]"></a>xPortStartScheduler</STRONG> (Thumb, 288 bytes, Stack size 16 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvEnableVFP
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[105]"></a>xQueueCreateMutex</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, queue.o(i.xQueueCreateMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUart
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorInit_MD
</UL>

<P><STRONG><a name="[176]"></a>xQueueGenericCreate</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, queue.o(i.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createBackTask2Queue
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createBackTask1Queue
</UL>

<P><STRONG><a name="[130]"></a>xQueueGenericReceive</STRONG> (Thumb, 384 bytes, Stack size 56 bytes, queue.o(i.xQueueGenericReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTaskIncrementMutexHeldCount
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backMotor2_task
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backMotor1_task
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartxSendData_UD
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmdToReg
</UL>

<P><STRONG><a name="[198]"></a>xQueueGenericReset</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[f2]"></a>xQueueGenericSend</STRONG> (Thumb, 372 bytes, Stack size 56 bytes, queue.o(i.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartWork
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartxSendData_UD
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandlerComm
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmdToReg
</UL>

<P><STRONG><a name="[19b]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[b8]"></a>xTaskGenericCreate</STRONG> (Thumb, 340 bytes, Stack size 56 bytes, tasks.o(i.xTaskGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTCBVariables
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAllocateTCBAndStack
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskCreate
</UL>

<P><STRONG><a name="[144]"></a>xTaskIncrementTick</STRONG> (Thumb, 286 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[185]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[18d]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[180]"></a>xTaskResumeAll</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[b6]"></a>AppTaskCreate</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, main.o(i.AppTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = AppTaskCreate &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6c]"></a>CanSendMsg_Task</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, main.o(i.CanSendMsg_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CanSendMsg_Task &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PopOutQueue_Q
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetQueueNum_Q
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TransmitStatus
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.AppTaskCreate)
</UL>
<P><STRONG><a name="[6d]"></a>Check_Liquid_State_Task</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, main.o(i.Check_Liquid_State_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Check_Liquid_State_Task &rArr; SensorStateOperation &rArr; SendSensor &rArr; SendMsg_ToHost &rArr; CanSendData_UD &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorStateOperation
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetSendFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.AppTaskCreate)
</UL>
<P><STRONG><a name="[6b]"></a>LiquidTest_Task</STRONG> (Thumb, 174 bytes, Stack size 0 bytes, main.o(i.LiquidTest_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LiquidTest_Task &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_Send_Msg
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.AppTaskCreate)
</UL>
<P><STRONG><a name="[68]"></a>MultiCommRead_Task</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(i.MultiCommRead_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = MultiCommRead_Task &rArr; MultiReadUART &rArr; HandlerComm &rArr; Process_Debug &rArr; Suction_Sample_Liq &rArr; MotorMove_LIQ &rArr; MotorPosReset_TD &rArr; SetMotorRunParam_MD &rArr; SendCmdToReg &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMutiCanMsg_BC
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiReadUART
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.AppTaskCreate)
</UL>
<P><STRONG><a name="[69]"></a>backMotor1_task</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, main.o(i.backMotor1_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = backMotor1_task &rArr; backMotorRunFun_mm &rArr; Suction_Sample &rArr; MotorMove_LIQ &rArr; MotorPosReset_TD &rArr; SetMotorRunParam_MD &rArr; SendCmdToReg &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createBackTask1Queue
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backMotorRunFun_mm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.AppTaskCreate)
</UL>
<P><STRONG><a name="[6a]"></a>backMotor2_task</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, main.o(i.backMotor2_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = backMotor2_task &rArr; createBackTask2Queue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createBackTask2Queue
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectMotorRunFun_mm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.AppTaskCreate)
</UL>
<P><STRONG><a name="[157]"></a>UartCallBack_SC</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, uartcallback.o(i.UartCallBack_SC))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart8CallBack_SC
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart7CallBack_SC
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart6CallBack_SC
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart5CallBack_SC
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart4CallBack_SC
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3CallBack_SC
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2CallBack_SC
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1CallBack_SC
</UL>

<P><STRONG><a name="[ff]"></a>GetUartIndex</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, uartdriver.o(i.GetUartIndex))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUart
</UL>

<P><STRONG><a name="[fe]"></a>InitUart</STRONG> (Thumb, 334 bytes, Stack size 24 bytes, uartdriver.o(i.InitUart))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = InitUart &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin2PinSource
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitQueue_Q
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUartIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartConfig_UD
</UL>

<P><STRONG><a name="[155]"></a>UartxInterruptHandler</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, uartdriver.o(i.UartxInterruptHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = UartxInterruptHandler &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PopOutQueue_Q
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetQueueNum_Q
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueIsFull
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PushInQueue_Q
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART8_IRQHandler
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7_IRQHandler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[c4]"></a>CanQueueParmInit</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, bsp_can_drive.o(i.CanQueueParmInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CanQueueParmInit &rArr; InitQueue_Q
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitQueue_Q
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Init_CD
</UL>

<P><STRONG><a name="[145]"></a>SysTick_ISR</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, bsp_timer.o(i.SysTick_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SysTick_ISR &rArr; bsp_RunPer100ms &rArr; MotorTimerTask
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SoftTimerDec
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_RunPer500ms
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_RunPer100ms
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_DAC_IRQHandler
</UL>

<P><STRONG><a name="[146]"></a>bsp_SoftTimerDec</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, bsp_timer.o(i.bsp_SoftTimerDec))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_ISR
</UL>

<P><STRONG><a name="[f6]"></a>IO_CS_Init</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, bsp_motor_drive.o(i.IO_CS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = IO_CS_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorInit_MD
</UL>

<P><STRONG><a name="[f7]"></a>IO_Motor5160_Init</STRONG> (Thumb, 252 bytes, Stack size 16 bytes, bsp_motor_drive.o(i.IO_Motor5160_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = IO_Motor5160_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorInit_MD
</UL>

<P><STRONG><a name="[f8]"></a>IO_Motor_Init</STRONG> (Thumb, 1084 bytes, Stack size 16 bytes, bsp_motor_drive.o(i.IO_Motor_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = IO_Motor_Init &rArr; SendCmdToMotor &rArr; SendCmdToReg &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmdToMotor5160
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmdToMotor
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorInit_MD
</UL>

<P><STRONG><a name="[132]"></a>SPI4ReadAndWrite</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, bsp_motor_drive.o(i.SPI4ReadAndWrite))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC5160_SendData
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC5160_ReadState
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC5160_ReadData
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmdToReg
</UL>

<P><STRONG><a name="[111]"></a>SPI_Motor_Init</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, bsp_motor_drive.o(i.SPI_Motor_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SPI_Motor_Init &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorInit_MD
</UL>

<P><STRONG><a name="[f9]"></a>SendCmdToMotor</STRONG> (Thumb, 336 bytes, Stack size 16 bytes, bsp_motor_drive.o(i.SendCmdToMotor))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SendCmdToMotor &rArr; SendCmdToReg &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmdToReg
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Motor_Init
</UL>

<P><STRONG><a name="[fa]"></a>SendCmdToMotor5160</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, bsp_motor_drive.o(i.SendCmdToMotor5160))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SendCmdToMotor5160 &rArr; TMC5160_SendData &rArr; SetMotorxCsIO
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC5160_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Motor_Init
</UL>

<P><STRONG><a name="[131]"></a>SetMotorxCsIO</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, bsp_motor_drive.o(i.SetMotorxCsIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetMotorxCsIO
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC5160_SendData
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC5160_ReadState
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC5160_ReadData
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmdToReg
</UL>

<P><STRONG><a name="[134]"></a>SendSensor</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, bsp_sensor.o(i.SendSensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SendSensor &rArr; SendMsg_ToHost &rArr; CanSendData_UD &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsg_ToHost
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStartSensorFlag
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorStateOperation
</UL>

<P><STRONG><a name="[6f]"></a>HandleTimeoutFun</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, drivermotortime.o(i.HandleTimeoutFun))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = HandleTimeoutFun &rArr; MotorReset &rArr; MoveCardOut &rArr; MotorMove_TD &rArr; MotorPosReset_TD &rArr; SetMotorRunParam_MD &rArr; SendCmdToReg &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC5160_MotorPosReset
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorReset
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_delay
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enn_motor
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC5160_HardStop
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopAllMotor
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drivermotortime.o(i.MotorTimerInit)
</UL>
<P><STRONG><a name="[11c]"></a>MotorTimerInt</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, drivermotortime.o(i.MotorTimerInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MotorTimerInt &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[11b]"></a>Tim2BspInit</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, drivermotortime.o(i.Tim2BspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Tim2BspInit &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorTimerInit
</UL>

<P><STRONG><a name="[126]"></a>SPI_Initial</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, bsp_spiflash.o(i.SPI_Initial))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SPI_Initial &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReadWriteByte
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
</UL>

<P><STRONG><a name="[91]"></a>ADD_INPUT_ConfigPWM</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, bsp_adc_drive.o(i.ADD_INPUT_ConfigPWM))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ADD_INPUT_ConfigPWM &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseStructInit
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectOCxM
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4PreloadConfig
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4PolarityConfig
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4Init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CtrlPWMOutputs
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1246_Init
</UL>

<P><STRONG><a name="[a4]"></a>ConfigPWM</STRONG> (Thumb, 260 bytes, Stack size 48 bytes, bsp_adc_drive.o(i.ConfigPWM))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ConfigPWM &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseStructInit
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectOCxM
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4PreloadConfig
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4PolarityConfig
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4Init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CtrlPWMOutputs
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1246_Init
</UL>

<P><STRONG><a name="[ab]"></a>ReadADS1246Reg</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, bsp_adc_drive.o(i.ReadADS1246Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ReadADS1246Reg
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI6ReadAndWrite
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_nms
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1246_Init
</UL>

<P><STRONG><a name="[aa]"></a>WriteADS1246Reg</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, bsp_adc_drive.o(i.WriteADS1246Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WriteADS1246Reg
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI6ReadAndWrite
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_nms
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1246_Init
</UL>

<P><STRONG><a name="[a7]"></a>delay_nms</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, bsp_adc_drive.o(i.delay_nms))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1246_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1246_WaitBusy
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteADS1246Reg
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadADS1246Reg
</UL>

<P><STRONG><a name="[13f]"></a>CalculateAllTC</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, c_t_value.o(i.CalculateAllTC))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CalculateAllTC
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCalculateReasult_MD
</UL>

<P><STRONG><a name="[e4]"></a>FindLineC</STRONG> (Thumb, 578 bytes, Stack size 32 bytes, c_t_value.o(i.FindLineC))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FindLineC
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestCV_MD
</UL>

<P><STRONG><a name="[e6]"></a>FindLineT</STRONG> (Thumb, 816 bytes, Stack size 48 bytes, c_t_value.o(i.FindLineT))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FindLineT
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMachineParam_HD
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestCV_MD
</UL>

<P><STRONG><a name="[12d]"></a>SearchAllPeak</STRONG> (Thumb, 632 bytes, Stack size 88 bytes, c_t_value.o(i.SearchAllPeak))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SearchAllPeak &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCalculateReasult_MD
</UL>

<P><STRONG><a name="[13e]"></a>SearchAllSmoothPoint</STRONG> (Thumb, 500 bytes, Stack size 24 bytes, c_t_value.o(i.SearchAllSmoothPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SearchAllSmoothPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCalculateReasult_MD
</UL>

<P><STRONG><a name="[13d]"></a>SearchBackPeak</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, c_t_value.o(i.SearchBackPeak))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SearchBackPeak
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCalculateReasult_MD
</UL>

<P><STRONG><a name="[cb]"></a>CheckITStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_can.o(i.CheckITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GetITStatus
</UL>

<P><STRONG><a name="[149]"></a>SetSysClock</STRONG> (Thumb, 272 bytes, Stack size 12 bytes, system_stm32f4xx.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[183]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, queue.o(i.prvCopyDataFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvCopyDataFromQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[184]"></a>prvCopyDataToQueue</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, queue.o(i.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[18a]"></a>prvIsQueueEmpty</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, queue.o(i.prvIsQueueEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvIsQueueEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[18b]"></a>prvIsQueueFull</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, queue.o(i.prvIsQueueFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvIsQueueFull
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[18c]"></a>prvUnlockQueue</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[179]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[17b]"></a>prvAllocateTCBAndStack</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, tasks.o(i.prvAllocateTCBAndStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[17e]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, tasks.o(i.prvCheckTasksWaitingTermination))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[182]"></a>prvDeleteTCB</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[7a]"></a>prvIdleTask</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[186]"></a>prvInitialiseTCBVariables</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, tasks.o(i.prvInitialiseTCBVariables))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvInitialiseTCBVariables
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[188]"></a>prvInitialiseTaskLists</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, tasks.o(i.prvInitialiseTaskLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[19d]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[79]"></a>prvTaskExitError</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[18f]"></a>prvHeapInit</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, heap_4.o(i.prvHeapInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[190]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, heap_4.o(i.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[16a]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[169]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[16d]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[16c]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
